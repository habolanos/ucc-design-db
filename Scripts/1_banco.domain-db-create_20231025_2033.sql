/*==============================================================*/
/* DBMS name:      ORACLE Version 10gR2                         */
/* Created on:     25102023 9:02:28 p.ï¿½m.                     */
/*==============================================================*/



-- TYPE PACKAGE DECLARATION
CREATE OR REPLACE PACKAGE PDTYPES  
AS
    TYPE REF_CURSOR IS REF CURSOR;
END;

-- INTEGRITY PACKAGE DECLARATION
CREATE OR REPLACE PACKAGE INTEGRITYPACKAGE AS
 PROCEDURE INITNESTLEVEL;
 FUNCTION GETNESTLEVEL RETURN NUMBER;
 PROCEDURE NEXTNESTLEVEL;
 PROCEDURE PREVIOUSNESTLEVEL;
 END INTEGRITYPACKAGE;

-- INTEGRITY PACKAGE DEFINITION
CREATE OR REPLACE PACKAGE BODY INTEGRITYPACKAGE AS
 NESTLEVEL NUMBER;

-- PROCEDURE TO INITIALIZE THE TRIGGER NEST LEVEL
 PROCEDURE INITNESTLEVEL IS
 BEGIN
 NESTLEVEL := 0;
 END;


-- FUNCTION TO RETURN THE TRIGGER NEST LEVEL
 FUNCTION GETNESTLEVEL RETURN NUMBER IS
 BEGIN
 IF NESTLEVEL IS NULL THEN
     NESTLEVEL := 0;
 END IF;
 RETURN(NESTLEVEL);
 END;

-- PROCEDURE TO INCREASE THE TRIGGER NEST LEVEL
 PROCEDURE NEXTNESTLEVEL IS
 BEGIN
 IF NESTLEVEL IS NULL THEN
     NESTLEVEL := 0;
 END IF;
 NESTLEVEL := NESTLEVEL + 1;
 END;

-- PROCEDURE TO DECREASE THE TRIGGER NEST LEVEL
 PROCEDURE PREVIOUSNESTLEVEL IS
 BEGIN
 NESTLEVEL := NESTLEVEL - 1;
 END;

 END INTEGRITYPACKAGE;


/*==============================================================*/
/* Table: CLIENTE                                               */
/*==============================================================*/
CREATE TABLE CLIENTE  (
   ID                   NUMBER(10)                     DEFAULT NULL NOT NULL,
   TIPO_CLIENTE_ID      VARCHAR(2)                      NOT NULL,
   NOMBRE               VARCHAR(40)                     NOT NULL,
   APELLIDOS            VARCHAR(40)                     NOT NULL
);


ALTER TABLE CLIENTE
   ADD CONSTRAINT PK_CLIENTE PRIMARY KEY (ID);



CREATE TABLE CUENTA  (
   ID                   NUMBER(10)                      NOT NULL,
   CLIENTE_ID           NUMBER(10)                      NOT NULL,
   FECHA_REGISTRO       TIMESTAMP WITH TIME ZONE        NOT NULL,
   FECHA_ACTUALIZACION  TIMESTAMP WITH TIME ZONE,
   SALDO                DECIMAL(12, 2)                  NOT NULL,
   USUARIO              VARCHAR(10),
   IP                   VARCHAR(15)
)


ALTER TABLE CUENTA
   ADD CONSTRAINT PK_CUENTA PRIMARY KEY (ID)


*==============================================================*
* Table: CUENTA_LOGS                                           *
*==============================================================*
CREATE TABLE CUENTA_LOGS  (
   ID                   NUMERIC(20)                     NOT NULL,
   FECHA_HORA           TIMESTAMP WITH TIME ZONE,
   CUENTA_ID            NUMBER(10)                      NOT NULL,
   FECHA_REGISTRO       TIMESTAMP WITH TIME ZONE        NOT NULL,
   FECHA_ACTUALIZACIO   TIMESTAMP WITH TIME ZONE,
   SALDO                DECIMAL(12, 2)                  NOT NULL,
   USUARIO              VARCHAR(10),
   IP                   VARCHAR(15)
)


ALTER TABLE CUENTA_LOGS
   ADD CONSTRAINT PK_CUENTA_LOGS PRIMARY KEY (ID)



CREATE TABLE DIRECCIONES  (
   ID                   NUMBER(10)                      NOT NULL,
   ID_CLIENTE           NUMBER(10)                      NOT NULL
)


ALTER TABLE DIRECCIONES
   ADD CONSTRAINT PK_DIRECCIONES PRIMARY KEY (ID)



CREATE TABLE EMAILS  (
   ID                   NUMBER(10)                      NOT NULL,
   ID_CLIENTE           NUMBER(10)                      NOT NULL,
   EMAIL                VARCHAR(50)                     NOT NULL
)


ALTER TABLE EMAILS
   ADD CONSTRAINT PK_EMAILS PRIMARY KEY (ID)



CREATE TABLE TELEFONOS  (
   ID                   NUMBER(10)                      NOT NULL,
   CLIENTE_ID           NUMBER(10)                      NOT NULL,
   TIPO_TELEFONO_ID     VARCHAR(2)                      NOT NULL,
   TELEFONO             VARCHAR(20)                     NOT NULL
)


ALTER TABLE TELEFONOS
   ADD CONSTRAINT PK_TELEFONOS PRIMARY KEY (ID)



CREATE TABLE TIPO_CLIENTE  (
   ID                   VARCHAR(2)                      NOT NULL,
   NOMBRE               VARCHAR(20)                     NOT NULL
)


ALTER TABLE TIPO_CLIENTE
   ADD CONSTRAINT PK_TIPO_CLIENTE PRIMARY KEY (ID)



CREATE TABLE TIPO_TELEFONO  (
   ID                   VARCHAR(2)                      NOT NULL,
   NOMBRE               VARCHAR(20)                     NOT NULL
)


ALTER TABLE TIPO_TELEFONO
   ADD CONSTRAINT PK_TIPO_TELEFONO PRIMARY KEY (ID)


ALTER TABLE CLIENTE
   ADD CONSTRAINT FK_CLIENTE_REF_TIPO_CLIENTE FOREIGN KEY (TIPO_CLIENTE_ID)
      REFERENCES TIPO_CLIENTE (ID)


ALTER TABLE CUENTA
   ADD CONSTRAINT FK_CUENTA_REF_CLIENTE FOREIGN KEY (CLIENTE_ID)
      REFERENCES CLIENTE (ID)


ALTER TABLE CUENTA_LOGS
   ADD CONSTRAINT FK_CUENTA_LOGS_REF_CUENTA FOREIGN KEY (CUENTA_ID)
      REFERENCES CUENTA (ID)


ALTER TABLE DIRECCIONES
   ADD CONSTRAINT FK_DIRECCION_REF_CLIENTE FOREIGN KEY (ID_CLIENTE)
      REFERENCES CLIENTE (ID)


ALTER TABLE EMAILS
   ADD CONSTRAINT FK_EMAILS_REF_CLIENTE FOREIGN KEY (ID_CLIENTE)
      REFERENCES CLIENTE (ID)


ALTER TABLE TELEFONOS
   ADD CONSTRAINT FK_TELEFONO_REF_CLIENTE FOREIGN KEY (CLIENTE_ID)
      REFERENCES CLIENTE (ID)


ALTER TABLE TELEFONOS
   ADD CONSTRAINT FK_TELEFONO_REF_TIPO_TEL FOREIGN KEY (TIPO_TELEFONO_ID)
      REFERENCES TIPO_TELEFONO (ID)



CREATE TRIGGER TIB_CLIENTE BEFORE INSERT
ON CLIENTE FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    --  COLUMN "ID" USES SEQUENCE CLIENTE_SEQ
    SELECT CLIENTE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;



CREATE TRIGGER TIB_CUENTA BEFORE INSERT
ON CUENTA FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    --  COLUMN "ID" USES SEQUENCE CUENTA_SEQ
    SELECT CUENTA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;



CREATE TRIGGER TUB_CUENTA BEFORE UPDATE
OF ID,
   CLIENTE_ID
ON CUENTA FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    --  NON MODIFIABLE COLUMN "ID" CANNOT BE MODIFIED
    IF UPDATING('ID') AND :OLD.ID != :NEW.ID THEN
       ERRNO  := -20001;
       ERRMSG := 'Non modifiable column "ID" cannot be modified.';
       RAISE INTEGRITY_ERROR;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;



CREATE TRIGGER TIB_CUENTA_LOGS BEFORE INSERT
ON CUENTA_LOGS FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    --  COLUMN "ID" USES SEQUENCE CUENTA_LOGS_SEQ
    SELECT CUENTA_LOGS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;



CREATE TRIGGER TIB_TELEFONOS BEFORE INSERT
ON TELEFONOS FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    --  COLUMN "ID" USES SEQUENCE TELEFONOS_SEQ
    SELECT TELEFONOS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;


